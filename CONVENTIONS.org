#+title: Conventions

* Engineering Conventions

- These are conventions for a monorepo hence they are broken down into [[id:50f5bdf6-1604-4e29-9194-17af1482e882][Frontend]] and [[id:b1e6a9f0-9bbe-4a7a-83a2-f8256900b37c][Backend]], for conventions specific to frontend and API development.
- All headings outside these 2 subtrees apply in all cases.
- The [[id:52a17d1c-0293-4814-9ff3-68b5bf1ad6f0][Current Focus]] determines where all engineering is focused on.

** Purpose

These conventions ensure that code is:

- Accessible to all users
- Easy to read and maintain
- Consistent in style and structure
- Following modern React and TypeScript best practices

** Current Focus: Frontend
:PROPERTIES:
:ID:       52a17d1c-0293-4814-9ff3-68b5bf1ad6f0
:END:
- Ignore the code in the [[file:backend/][backend]] folder, the api will be developed afer the frontend.
- A npm script has already autogenerated types in "./frontend/types/strapi.d.ts" these are also to be ignored.
- The conventions in [[id:b1e6a9f0-9bbe-4a7a-83a2-f8256900b37c][Backend]] are not to be prioritized right now.

** Frontend: Nextjs Conventions
:PROPERTIES:
:ID:       50f5bdf6-1604-4e29-9194-17af1482e882
:END:

This conventions file provides guidelines for writing high-quality Next.js applications with TypeScript. The conventions emphasize best practices for modern React development with a focus on accessibility, readability, and maintainability.

*** Use Cases

This convention is intended for use when developing:

- Next.js applications
- React applications with TypeScript
- Modern web applications requiring strong UI/UX principles
- Projects using Ark UI or other component libraries

*** Relevance to this project

These conventions apply to all code in the [[file:frontend/][frontend]] folder

*** Routing with App Router

- The old nextjs pages router is not to be used, instead use the new [[https://nextjs.org/docs/app][App Router]].
- All pages are to be defined under the [[file:frontend/src/app/][src/app/]] directory.

*** Project Structure

This sections details the structure relative to the [[file:frontend/][frontend]] folder:

- [[file:frontend/src/app/][src/app/]]: Code that defines or applies to pages
- [[file:frontend/src/lib/][src/lib/]]: Reusable logic
- [[file:frontend/src/types/index.ts][src/types/index.ts]]: Type definitions
- [[file:frontend/src/components/rsc/][src/components/rsc/]]: React Server Components that are shared across the app
- [[file:frontend/src/components/client/][src/components/client/]]: React Client Components that are shared across the app
- =src/app/<path>/rsc/=: React Server Components specific to the routing =<path>= that are not used elsewhere
- =src/app/<path>/client/=: React Client Components specific the routing =<path>= that are not used elsewhere

*** Components

- Prefer modular code over huge page definitions
- To that end split code into smaller components when reasonable
- I.e: A hero section is a component of the landing page not simply a section of code in the =page.tsx=
- The file tree of a component's =.tsx= file always traces back to exactly one of either:
  - a =rsc= folder if the component is a server component
  - a =client= folder if the component is a client component

**** Nested Components

- If components use other components they can import those from either:
  - below it's file tree
  - or one of the shared component folders:
    - [[file:frontend/src/components/rsc/][src/components/rsc/]]
    - [[file:frontend/src/components/client/][src/components/client/]]
- Don't duplicate a =rsc= or =client= folder if there is already one in the filetree above it
- Components are defined in either:
  - a =.tsx= file representing their name, i.e. a =PrimaryButton= components resides in =primary-button.tsx=
  - a =index.tsx= file in a folder representing the components name, i.e a =Navbar= component may reside in =navbar/index.tsx=
    - This is the case if: the component imports a child component that is not used elsewhere and is of the same type (server or client component)
      - the component imports a child component that is not used elsewhere and
      - the child component is of the same type (server or client component)

*** Styling

- Use [[https://tailwindcss.com/docs/styling-with-utility-classes][TailwindCSS]] for styling

** Backend
:PROPERTIES:
:ID:       b1e6a9f0-9bbe-4a7a-83a2-f8256900b37c
:END:
